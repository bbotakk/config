#+title:    I3 WM config
#+author:   bo
#+date:     Thursday, June 15, 2023

* Philosophy
 - Eliminate mental overhead and reduce computationnal steps to get to where you need to be.
 - Finetuned to automate the workflow as much as possible.
 - Accessing a program is as efficient as possible and always consistent, no matter where in your desktop you are (different monitor/workspace/app order) You will not Alt+tab through apps to get to the one you are thinking of. Instead the app is always bound to the same mnemonical keybind.
 - Minimal keystrokes to get from where you are to the app you want to be.
 - Keyboard driven workflow only. (Vi-mnemonic bindings)
 - Strictly avoid multitasking -> Always work in Fullscreen to never have to resize a window.

* Startup automation
This script will launch the following:
- bg-processes
- statusbar (polybar)
- remaps
- programs
#+begin_src conf :tangle "config" :comments link
exec --no-startup-id "~/.config/scripts/startup"
#+end_src

* Options
#+begin_src conf :tangle "config" :comments link
workspace_auto_back_and_forth no
workspace_layout tabbed
force_focus_wrapping no
default_orientation horizontal
default_border pixel 2
hide_edge_borders smart
title_align left
font pango: Iosevka Nerd Font 8
for_window [all] title_window_icon yes; move container to workspace 1; workspace 1
for_window [urgent="latest"] focus
#+end_src

* Assign: workspaces
I currently do not have this configured, since this config runs on multiple machines in sync and thus would require different output configurations.
#+begin_src conf
workspace 1 output DP-1-1
workspace 2 output DP-1-2
workspace 3 output DP-1-3
#+end_src

* Keybindings
Using Alt inside Applications to get the same behaviour, but in the app  in order to minimize conflict with existing shortcuts.
eg. Emacs: Alt+f-> find-file, eg. Terminal: Alt+e->edit-command-in-editor

** Modkey
Using Super (Mod4).
#+begin_src conf :tangle "config" :comments link
set $mod Mod4
floating_modifier $mod
#+end_src

** System controls
- Enable controlling the system via inbuillt laptop keys but also with shortcuts on a external keyboard.
#+begin_src conf :tangle "config" :comments link
bindsym XF86MonBrightnessDown   exec "sudo light -U 2"
bindsym XF86MonBrightnessUp     exec "sudo light -A 2"
bindsym $mod+bracketright       exec "playerctl next"
bindsym $mod+bracketleft        exec "playerctl previous"
bindsym $mod+backslash          exec "playerctl play-pause"
bindsym $mod+up                 exec "pactl set-sink-volume @DEFAULT_SINK@ +2%"
bindsym $mod+down               exec "pactl set-sink-volume @DEFAULT_SINK@ -2%"
bindsym XF86AudioPlay           exec "playerctl play"
bindsym XF86AudioPause          exec "playerctl pause"
bindsym XF86AudioNext           exec "playerctl next"
bindsym XF86AudioPrev           exec "playerctl previous"
bindsym XF86AudioRaiseVolume    exec "pactl set-sink-volume @DEFAULT_SINK@ +2%"
bindsym XF86AudioLowerVolume    exec "pactl set-sink-volume @DEFAULT_SINK@ -2%"
bindsym XF86AudioMute           exec "pactl set-sink-mute @DEFAULT_SINK@ toggle"
bindsym XF86Display             exec "i3lock -e --color F2E6CE; systemctl suspend"
bindsym XF86Lock                exec "i3lock -e --color F2E6CE; systemctl suspend"
bindsym Print                   exec "flameshot gui"
bindsym $mod+shift+p            exec "flameshot gui"
#+end_src

Xbacklight doesnt work for my hardware -> using light instead. This might not work, so you could use the standard xbacklight with the following:
  #+begin_src conf
bindsym XF86MonBrightnessUp     exec "sudo xbacklight +2"
bindsym XF86MonBrightnessDown   exec "sudo xbacklight -2"
  #+end_src

** Workspace
#+begin_src conf :tangle "config" :comments link
bindsym $mod+Tab        move workspace to output next;
bindsym $mod+1          move container to workspace 1; workspace 1
bindsym $mod+2          move container to workspace 2; workspace 2
bindsym $mod+3          move container to workspace 3; workspace 3
#+end_src

** Core Navigation
- Do not remap these keybindings to other keys. The bindings are universal and used in many apps so they should keep their function.
- note: i choose only <JK> as navigational keys, because navigation is just done for one offs and not lots of cycling, thus using the two main vim keys, which are next to each other makes more sense instead of using <HL> which are also inconvenient on dvorak. (also you might get confused, why j is prev and not next (as in next-line) but this was chosen due to the fact that you are focusing the window on the left and the <j> is left of <k>)
| bind    | action          |
|---------+-----------------|
| j       | prev window     |
| k       | next window     |
| q       | quit window     |
| s       | split window    |
| '=' (+) | zoom in         |
| -       | zoom out        |
| return  | run             |
| ;       | execute command |
| f       | find            |

#+begin_src conf :tangle "config" :commentss link
bindsym $mod+j          focus prev
bindsym $mod+shift+j    move left
bindsym $mod+k          focus next
bindsym $mod+shift+k    move right
bindsym $mod+q          kill
bindsym $mod+s          layout toggle splith tabbed
bindsym $mod+equal      resize grow width 10 px
bindsym $mod+minus      resize shrink width 10 px
bindsym $mod+Return     exec "rofi -show drun"
bindsym $mod+semicolon  exec "rofi -show run"
bindsym $mod+f          exec "rofi -show window"
#+end_src

** Core Programs
Do not remap these keybindings to other keys, you may want to use other programs, which is fine, but the bindings are universal and used in many apps so they should keep their function.
| Bind | Name        |
|------+-------------|
| t    | terminal    |
| e    | editor      |
| x    | filexplorer |
| v    | viewer      |
| b    | browser     |

#+begin_src conf :tangle "config" :commentss link
bindsym $mod+t          exec "~/.config/scripts/focus -s tui terminal "
bindsym $mod+v          exec "~/.config/scripts/focus gui zathura zathura"
bindsym $mod+e          exec "~/.config/scripts/focus gui emacs 'emacsclient -c'"
bindsym $mod+shift+e    exec "emacsclient --eval '(emacs-everywhere)'"
bindsym $mod+x          exec "~/.config/scripts/focus gui emacs 'emacsclient -c'"
bindsym $mod+shift+x    exec "~/.config/scripts/focus gui Thunar thunar"
# bindsym $mod+x          exec "~/.config/scripts/focus tui lf lf"
bindsym $mod+b          exec "~/.config/scripts/focus gui firefox firefox"
#+end_src


** Extra Programs
- these bindings just use mnemonics and can be exchanged. These are non-overlapping Programs and mostly gui's.
#+begin_src conf :tangle "config" :commentss link
bindsym $mod+a          exec "~/.config/scripts/focus gui Clementine clementine"
bindsym $mod+shift+a    exec "~/.config/scripts/focus gui pavucontrol pavucontrol"
bindsym $mod+m          exec "~/.config/scripts/focus gui mpv mpv"
bindsym $mod+c          exec "~/.config/scripts/focus tui bc 'bc -l'"
bindsym $mod+o          exec "~/.config/scripts/focus gui obs 'flatpak run com.obsproject.Studio'"
bindsym $mod+p          exec "~/.config/scripts/focus tui htop htop"
#+end_src

** Leader: Mod+Space
#+begin_src conf :tangle "config" :comments link
bindsym $mod+space mode "$leader"
set $leader <leader> reBoot / Suspend / Lock / Poweroff / Exit / Restart-i3 / +Help / +Outputs / +Keyboard / +Timer
mode "$leader" {
    bindsym r           exec "i3-msg restart";                                  mode "default"
    bindsym e           exec "i3-msg exit";                                     mode "default"
    bindsym b           exec "systemctl reboot";                                mode "default"
    bindsym s           exec "i3lock -e --color F2E6CE; systemctl suspend";     mode "default"
    bindsym l           exec "i3lock -e --color F2E6CE; xset dpms force off";   mode "default"
    bindsym p           exec "systemctl poweroff";                              mode "default"
    bindsym o           mode "$outputselect"
    bindsym h           mode "$help"
    bindsym k           mode "$keyboard"
    bindsym t           mode "$timer"
    bindsym a           mode "$appearance"
    bindsym Escape      mode "default"
}
#+end_src

*** output
- Quickly switch screen arrangements when connecting to external outputs.
- The remapping script needs to be ran bc usually a external keyboard is connected/disconnected, meaning mappings need to be reloaded.
#+begin_src conf :tangle "config" :comments link
set $outputselect <outputselect> Arandr / Thinkpad_home / Library
mode "$outputselect" {
    bindsym t           exec "~/.screenlayout/thinkpad_home.sh; ~/.config/scripts/startup"; mode "default"
    bindsym l           exec "~/.screenlayout/lib.sh; ~/.config/scripts/startup"; mode "default"
    bindsym a           exec "~/.config/scripts/focus gui Arandr arandr"; mode "default"
    bindsym Escape      mode "default"
}
#+end_src

*** keyboard-layout
#+begin_src conf :tangle "config" :comments link
set $keyboard <keyboard-layout> Dvorak / Ch / Us
mode "$keyboard" {
    bindsym d           exec "setxkbmap us dvorak"; mode "default"
    bindsym c           exec "setxkbmap ch";        mode "default"
    bindsym u           exec "setxkbmap us";        mode "default"
    bindsym Escape      mode "default"
}
#+end_src

*** timer
This is a simple timer that is displayed in Polybar and is useful to track time spent/to be more efficient and productive with time management.
#+begin_src conf :tangle "config" :comments link
set $timer <timer> stopWatch / Interval 60/5 / ^Interval 30/5 / [1] timer 15min / [2] timer 30 min / [3] timer 45min / [4] timer 1h / [5] timer 1.5h / [6] timer 2h / [7] timer 3h / [8] timer 4h / Stop
mode "$timer" {
    bindsym w           exec "~/.config/scripts/timer start stopwatch";             mode "default"
    bindsym i           exec "~/.config/scripts/timer start interval 60min 5min";   mode "default"
    bindsym shift+i     exec "~/.config/scripts/timer start interval 30min 5min";   mode "default"
    bindsym 1           exec "~/.config/scripts/timer start timer 15min";           mode "default"
    bindsym 2           exec "~/.config/scripts/timer start timer 30min";           mode "default"
    bindsym 3           exec "~/.config/scripts/timer start timer 45min";           mode "default"
    bindsym 4           exec "~/.config/scripts/timer start timer 1hr";             mode "default"
    bindsym 5           exec "~/.config/scripts/timer start timer 1.5hr";           mode "default"
    bindsym 6           exec "~/.config/scripts/timer start timer 2hr";             mode "default"
    bindsym 7           exec "~/.config/scripts/timer start timer 3hr";             mode "default"
    bindsym 8           exec "~/.config/scripts/timer start timer 4hr";             mode "default"
    bindsym s           exec "~/.config/scripts/timer stop";                        mode "default"
    bindsym Escape      mode "default"
}
#+end_src

* Theme
** solarized light
#+begin_src conf :tangle "config" :comments link
set $backg  #F2E6CE
set $foreg  #657b83
set $main 	#268bd2
set $gray 	#93a1a1
set $yellow #b58900
set $orange #cb4b16
set $red 	#dc322f
set $purple #6c71c4
set $blue 	#268bd2
set $cyan 	#2aa198
set $green 	#859900
#+end_src

** solarized dark
- Not in use, but as in all other dotfiles, present as an alternative if preferred.

#+begin_src conf
set $backg  #002b36
set $foreg  #657b83
set $main 	#268bd2
set $gray 	#93a1a1
set $yellow #b58900
set $orange #cb4b16
set $red 	#dc322f
set $purple #6c71c4
set $blue 	#268bd2
set $cyan 	#2aa198
set $green 	#859900
#+end_src

** Set theme
This remains, just the colors variables must be defined by the theme.
#+begin_src conf :tangle "config" :comments link
# class                 border  backg   text    indicator child
client.focused          $main   $main   $backg  $foreg    $main
client.focused_inactive $gray   $gray   $backg  $backg    $backg
client.unfocused        $backg  $backg  $foreg  $backg    $backg
client.urgent           $red    $red    $backg  $backg    $backg
client.placeholder      $backg  $backg  $foreg  $backg    $backg
client.background       $backg
#+end_src

* Statusbar
Using Polybar instead, but if Polybar is not wanted this can be used instead:
#+begin_src conf
bar {
mode dock
position bottom
separator_symbol " | "
# status_command i3status
# tray_output primary
colors {
    background $backg
    statusline $foreg
    separator  $foreg
    # class             border  backg   text
    focused_workspace   $main   $main   $backg
    inactive_workspace  $backg  $backg  $foreg
    active_workspace    $backg  $backg  $foreg
    urgent_workspace    $red    $red    $backg
    binding_mode        $main   $main   $backg
    }
}
#+end_src
